{"ast":null,"code":"const clientId = '3da6d518fbe54b3fbf81d70afe5c4a44'; // Spotify app's client ID\nconst redirectUri = 'https://effective-space-telegram-69rpgj99xj5r25w9w-3000.app.github.dev/'; // app's redirect URI\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    // Check for token in the URL\n    const tokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (tokenMatch && expiresMatch) {\n      accessToken = tokenMatch[1];\n      const expiresIn = Number(expiresMatch[1]);\n\n      // Clear the access token from the URL\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      // Redirect to Spotify authorization page\n      const scope = 'playlist-modify-public';\n      const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=${scope}&redirect_uri=${redirectUri}`;\n      window.location = authUrl;\n    }\n  },\n  async search(term) {\n    const token = Spotify.getAccessToken();\n    const endpoint = `https://api.spotify.com/v1/search?type=track&q=${encodeURIComponent(term)}`;\n    try {\n      const response = await fetch(endpoint, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch search results');\n      }\n      const jsonResponse = await response.json();\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    } catch (error) {\n      console.error('Error fetching search results:', error);\n      return [];\n    }\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","tokenMatch","window","location","href","match","expiresMatch","expiresIn","Number","setTimeout","history","pushState","scope","authUrl","search","term","token","endpoint","encodeURIComponent","response","fetch","headers","Authorization","ok","Error","jsonResponse","json","tracks","items","map","track","id","name","artist","artists","album","uri","error","console"],"sources":["/workspaces/Spotify-Playlist-Project/jammming/src/Spotify.js"],"sourcesContent":["const clientId = '3da6d518fbe54b3fbf81d70afe5c4a44'; // Spotify app's client ID\nconst redirectUri = 'https://effective-space-telegram-69rpgj99xj5r25w9w-3000.app.github.dev/'; // app's redirect URI\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    // Check for token in the URL\n    const tokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (tokenMatch && expiresMatch) {\n      accessToken = tokenMatch[1];\n      const expiresIn = Number(expiresMatch[1]);\n\n      // Clear the access token from the URL\n      window.setTimeout(() => (accessToken = ''), expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      // Redirect to Spotify authorization page\n      const scope = 'playlist-modify-public';\n      const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=${scope}&redirect_uri=${redirectUri}`;\n      window.location = authUrl;\n    }\n  },\n\n  async search(term) {\n    const token = Spotify.getAccessToken();\n    const endpoint = `https://api.spotify.com/v1/search?type=track&q=${encodeURIComponent(term)}`;\n\n    try {\n      const response = await fetch(endpoint, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch search results');\n      }\n\n      const jsonResponse = await response.json();\n\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map((track) => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri,\n      }));\n    } catch (error) {\n      console.error('Error fetching search results:', error);\n      return [];\n    }\n  },\n};\n\nexport default Spotify;\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAkC,CAAC,CAAC;AACrD,MAAMC,WAAW,GAAG,yEAAyE,CAAC,CAAC;AAC/F,IAAIC,WAAW;AAEf,MAAMC,OAAO,GAAG;EACdC,cAAcA,CAAA,EAAG;IACf,IAAIF,WAAW,EAAE;MACf,OAAOA,WAAW;IACpB;;IAEA;IACA,MAAMG,UAAU,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,sBAAsB,CAAC;IACrE,MAAMC,YAAY,GAAGJ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC;IAErE,IAAIJ,UAAU,IAAIK,YAAY,EAAE;MAC9BR,WAAW,GAAGG,UAAU,CAAC,CAAC,CAAC;MAC3B,MAAMM,SAAS,GAAGC,MAAM,CAACF,YAAY,CAAC,CAAC,CAAC,CAAC;;MAEzC;MACAJ,MAAM,CAACO,UAAU,CAAC,MAAOX,WAAW,GAAG,EAAG,EAAES,SAAS,GAAG,IAAI,CAAC;MAC7DL,MAAM,CAACQ,OAAO,CAACC,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE,GAAG,CAAC;MACnD,OAAOb,WAAW;IACpB,CAAC,MAAM;MACL;MACA,MAAMc,KAAK,GAAG,wBAAwB;MACtC,MAAMC,OAAO,GAAG,oDAAoDjB,QAAQ,8BAA8BgB,KAAK,iBAAiBf,WAAW,EAAE;MAC7IK,MAAM,CAACC,QAAQ,GAAGU,OAAO;IAC3B;EACF,CAAC;EAED,MAAMC,MAAMA,CAACC,IAAI,EAAE;IACjB,MAAMC,KAAK,GAAGjB,OAAO,CAACC,cAAc,CAAC,CAAC;IACtC,MAAMiB,QAAQ,GAAG,kDAAkDC,kBAAkB,CAACH,IAAI,CAAC,EAAE;IAE7F,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAQ,EAAE;QACrCI,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUN,KAAK;QAChC;MACF,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;MACnD;MAEA,MAAMC,YAAY,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAE1C,IAAI,CAACD,YAAY,CAACE,MAAM,EAAE;QACxB,OAAO,EAAE;MACX;MAEA,OAAOF,YAAY,CAACE,MAAM,CAACC,KAAK,CAACC,GAAG,CAAEC,KAAK,KAAM;QAC/CC,EAAE,EAAED,KAAK,CAACC,EAAE;QACZC,IAAI,EAAEF,KAAK,CAACE,IAAI;QAChBC,MAAM,EAAEH,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC,CAACF,IAAI;QAC7BG,KAAK,EAAEL,KAAK,CAACK,KAAK,CAACH,IAAI;QACvBI,GAAG,EAAEN,KAAK,CAACM;MACb,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,OAAO,EAAE;IACX;EACF;AACF,CAAC;AAED,eAAetC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}