{"ast":null,"code":"var _jsxFileName = \"/workspaces/Spotify-Playlist-Project/jammming/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, React } from 'react';\nimport { SearchBar } from './SearchBar';\nimport { SearchResults } from './SearchResults';\nimport { Playlist } from './Playlist';\nimport './App.css';\nimport Spotify from './Spotify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Hardcoded array of track objects\n  const [tracks] = useState([{\n    id: 1,\n    name: 'Track 1',\n    artist: 'Artist 1',\n    album: 'Album 1'\n  }, {\n    id: 2,\n    name: 'Track 2',\n    artist: 'Artist 2',\n    album: 'Album 2'\n  }, {\n    id: 3,\n    name: 'Track 3',\n    artist: 'Artist 3',\n    album: 'Album 3'\n  }, {\n    id: 4,\n    name: 'Track 4',\n    artist: 'Artist 4',\n    album: 'Album 4'\n  }]);\n\n  // Hardcoded playlist data for testing\n  const [playlist, setPlaylist] = useState({\n    name: 'My Playlist',\n    tracks: [{\n      id: 1,\n      name: 'Track 1',\n      artist: 'Artist 1',\n      album: 'Album 1'\n    }, {\n      id: 2,\n      name: 'Track 2',\n      artist: 'Artist 2',\n      album: 'Album 2'\n    }, {\n      id: 3,\n      name: 'Track 3',\n      artist: 'Artist 3',\n      album: 'Album 3'\n    }]\n  });\n\n  // Hardcoded search results (simulating API response)\n  const [searchResults, setSearchResults] = useState([{\n    id: 4,\n    name: 'Track 4',\n    artist: 'Artist 4',\n    album: 'Album 4'\n  }, {\n    id: 5,\n    name: 'Track 5',\n    artist: 'Artist 5',\n    album: 'Album 5'\n  }, {\n    id: 6,\n    name: 'Track 6',\n    artist: 'Artist 6',\n    album: 'Album 6'\n  }]);\n\n  // Method to add a track to the playlist if it's not already there\n  const addTrackToPlaylist = track => {\n    if (!playlist.tracks.some(existingTrack => existingTrack.id === track.id)) {\n      setPlaylist(prevPlaylist => ({\n        ...prevPlaylist,\n        tracks: [...prevPlaylist.tracks, track]\n      }));\n    }\n  };\n\n  // Method to remove a track from the playlist\n  const removeTrackFromPlaylist = track => {\n    setPlaylist(prevPlaylist => ({\n      ...prevPlaylist,\n      tracks: prevPlaylist.tracks.filter(existingTrack => existingTrack.id !== track.id)\n    }));\n  };\n\n  // Method to update the playlist name\n  const updatePlaylistName = newName => {\n    setPlaylist(prevPlaylist => ({\n      ...prevPlaylist,\n      name: newName\n    }));\n  };\n  const savePlaylist = async () => {\n    // Extract URIs from the playlist tracks\n    const trackUris = playlist.tracks.map(track => track.uri);\n    if (trackUris.length === 0) {\n      alert(\"Your playlist is empty! Add tracks before saving.\");\n      return;\n    }\n    try {\n      // Save the playlist using the Spotify API\n      await Spotify.savePlaylist(playlist.name, trackUris);\n\n      // Reset the playlist upon successful save\n      setPlaylist({\n        name: 'New Playlist',\n        tracks: []\n      });\n      alert('Your playlist has been saved to Spotify!');\n    } catch (error) {\n      // Log the error and notify the user\n      console.error('Error saving playlist:', error);\n      alert('There was an issue saving your playlist. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Jammming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: term => Spotify.search(term).then(setSearchResults)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-content\",\n      children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n        searchResults: searchResults,\n        addTrackToPlaylist: addTrackToPlaylist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n        playlist: playlist,\n        removeTrackFromPlaylist: removeTrackFromPlaylist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mt83Aoj8M36dq0YCbxo1MX2yQcg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","React","SearchBar","SearchResults","Playlist","Spotify","jsxDEV","_jsxDEV","App","_s","tracks","id","name","artist","album","playlist","setPlaylist","searchResults","setSearchResults","addTrackToPlaylist","track","some","existingTrack","prevPlaylist","removeTrackFromPlaylist","filter","updatePlaylistName","newName","savePlaylist","trackUris","map","uri","length","alert","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","term","search","then","_c","$RefreshReg$"],"sources":["/workspaces/Spotify-Playlist-Project/jammming/src/App.js"],"sourcesContent":["import { useState, React } from 'react';\nimport { SearchBar } from './SearchBar';\nimport { SearchResults } from './SearchResults';\nimport { Playlist } from './Playlist';\nimport './App.css';\nimport Spotify from './Spotify';\n\nfunction App() {\n  // Hardcoded array of track objects\n  const [tracks] = useState([\n    { id: 1, name: 'Track 1', artist: 'Artist 1', album: 'Album 1' },\n    { id: 2, name: 'Track 2', artist: 'Artist 2', album: 'Album 2' },\n    { id: 3, name: 'Track 3', artist: 'Artist 3', album: 'Album 3' },\n    { id: 4, name: 'Track 4', artist: 'Artist 4', album: 'Album 4' },\n  ]);\n  \n  // Hardcoded playlist data for testing\n  const [playlist, setPlaylist] = useState({\n    name: 'My Playlist',\n    tracks: [\n      { id: 1, name: 'Track 1', artist: 'Artist 1', album: 'Album 1' },\n      { id: 2, name: 'Track 2', artist: 'Artist 2', album: 'Album 2' },\n      { id: 3, name: 'Track 3', artist: 'Artist 3', album: 'Album 3' },\n    ]\n  });\n\n  // Hardcoded search results (simulating API response)\n  const [searchResults, setSearchResults] = useState([\n    { id: 4, name: 'Track 4', artist: 'Artist 4', album: 'Album 4' },\n    { id: 5, name: 'Track 5', artist: 'Artist 5', album: 'Album 5' },\n    { id: 6, name: 'Track 6', artist: 'Artist 6', album: 'Album 6' },\n  ]);\n\n  // Method to add a track to the playlist if it's not already there\n  const addTrackToPlaylist = (track) => {\n    if (!playlist.tracks.some(existingTrack => existingTrack.id === track.id)) {\n      setPlaylist(prevPlaylist => ({\n        ...prevPlaylist,\n        tracks: [...prevPlaylist.tracks, track]\n      }));\n    }\n  };\n\n  // Method to remove a track from the playlist\n  const removeTrackFromPlaylist = (track) => {\n    setPlaylist(prevPlaylist => ({\n      ...prevPlaylist,\n      tracks: prevPlaylist.tracks.filter(existingTrack => existingTrack.id !== track.id)\n    }));\n  };\n\n  // Method to update the playlist name\n  const updatePlaylistName = (newName) => {\n    setPlaylist((prevPlaylist) => ({\n      ...prevPlaylist,\n      name: newName,\n    }));\n  };\n\n  const savePlaylist = async () => {\n    // Extract URIs from the playlist tracks\n  const trackUris = playlist.tracks.map((track) => track.uri);\n\n  if (trackUris.length === 0) {\n    alert(\"Your playlist is empty! Add tracks before saving.\");\n    return;\n  }\n\n  try {\n    // Save the playlist using the Spotify API\n    await Spotify.savePlaylist(playlist.name, trackUris);\n    \n    // Reset the playlist upon successful save\n    setPlaylist({ name: 'New Playlist', tracks: [] });\n    alert('Your playlist has been saved to Spotify!');\n  } catch (error) {\n    // Log the error and notify the user\n    console.error('Error saving playlist:', error);\n    alert('There was an issue saving your playlist. Please try again.');\n  }\n  }\n    \n\n  return (\n    <div className=\"App\">\n      <h1>Jammming</h1>\n      <SearchBar onSearch={(term) => Spotify.search(term).then(setSearchResults)} />\n      <div className=\"App-content\">\n        <SearchResults searchResults={searchResults} addTrackToPlaylist={addTrackToPlaylist} />\n        <Playlist playlist={playlist} removeTrackFromPlaylist={removeTrackFromPlaylist} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}